{"version":3,"sources":["services/app.service.ts"],"names":["AppService","http","this","countriesUrl","prototype","getAllCountries","get","map","response","json","catch","handleError","getCountry","id","Error","url","saveCountry","country","post","deleteCountry","delete","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"46BAMAA,WAAA,WACI,QAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAIZC,KAAAC,aAAe,iBAkC3B,MAhCIH,YAAAI,UAAAC,gBAAA,WACI,MAAOH,MAAKD,KAAKK,IAAIJ,KAAKC,cACrBI,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMR,KAAKS,cAEpBX,WAAAI,UAAAQ,WAAA,SAAWC,IACP,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,kBAChC,IAAIC,KAAMb,KAAKC,aAAeU,EAC9B,OAAOX,MAAKD,KAAKK,IAAIS,KAChBR,IAAI,SAAAC,UAAY,MAASA,UAASC,SAClCC,MAAMR,KAAKS,cAGpBX,WAAAI,UAAAY,YAAA,SAAYC,SACR,GAAe,MAAXA,QAAiB,KAAM,IAAIH,OAAM,qBACrC,IAAIC,KAAMb,KAAKC,YACf,OAAOD,MAAKD,KAAKiB,KAAKH,IAAKE,SACtBV,IAAI,SAAAC,UAAY,MAASA,UAASC,SAClCC,MAAMR,KAAKS,cAGpBX,WAAAI,UAAAe,cAAA,SAAcN,IACV,GAAU,MAANA,GAAY,KAAM,IAAIC,OAAM,kBAChC,IAAIC,KAAMb,KAAKC,aAAeU,EAC9B,OAAOX,MAAKD,KAAKmB,OAAOL,KACnBL,MAAMR,KAAKS,cAGZX,WAAAI,UAAAO,YAAR,SAAoBU,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMZ,OAAOY,OAAS,iBAtCtDrB,WAAA0B,YAACC,OAAAC,2EACDC,UAAA,aAAA7B","file":"app.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Country } from \"../viewmodels/Country\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n    constructor(private http: Http)\r\n    { }\r\n\r\n    //URL to web api\r\n    private countriesUrl = 'api/countries/';\r\n\r\n    getAllCountries() {\r\n        return this.http.get(this.countriesUrl)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n    getCountry(id: string) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.countriesUrl + id;\r\n        return this.http.get(url)\r\n            .map(response => <Country>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    saveCountry(country: Country) {\r\n        if (country == null) throw new Error(\"Country not found.\");\r\n        var url = this.countriesUrl;\r\n        return this.http.post(url, country)\r\n            .map(response => <Country>response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    deleteCountry(id: string) {\r\n        if (id == null) throw new Error(\"id is required.\");\r\n        var url = this.countriesUrl + id;\r\n        return this.http.delete(url)\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}