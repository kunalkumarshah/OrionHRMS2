{"version":3,"sources":["inline-edit.component.ts"],"names":["INLINE_EDIT_CONTROL_VALUE_ACCESSOR","InlineEditComponent","Provider","common_1","NG_VALUE_ACCESSOR","useExisting","core_1","forwardRef","multi","this","_value","onChange","Function","prototype","onTouched","Object","defineProperty","v","writeValue","value","registerOnChange","fn","registerOnTouched","__decorate","Component","selector","providers","styleUrls","templateUrl","exports_1"],"mappings":"mHAIMA,mCAAkCC,uvBAAlCD,mCAAqC,GAAIE,UAC3CC,SAAAC,mBACIC,YAAaC,OAAAC,WAAW,WAAM,MAAAN,uBAC9BO,OAAO,IASfP,oBAAA,WAEI,QAAAA,uBAGQQ,KAAAC,OAAiB,GAGlBD,KAAAE,SAAgBC,SAASC,UACzBJ,KAAAK,UAAiBF,SAASC,UAwBrC,MArBIE,QAAAC,eAAIf,oBAAAY,UAAA,aAAJ,WAAmB,MAAOJ,MAAKC,YAG/B,SAAUO,GACFA,IAAMR,KAAKC,SACXD,KAAKC,OAASO,EACdR,KAAKE,SAASM,qCAKtBhB,oBAAAY,UAAAK,WAAA,SAAWC,OACPV,KAAKC,OAASS,OAIXlB,oBAAAY,UAAAO,iBAAP,SAAwBC,IAA4BZ,KAAKE,SAAWU,IAG7DpB,oBAAAY,UAAAS,kBAAP,SAAyBD,IAAsBZ,KAAKK,UAAYO,IArCpEpB,oBAAAsB,YAACjB,OAAAkB,WACGC,SAAU,cACVC,WAAY1B,oCACZ2B,WAAY,+BACZC,YAAa,6FAEjBC,UAAA,sBAAA5B","file":"inline-edit.component.js","sourcesContent":["import { Component, Provider, forwardRef } from '@angular/core';\r\n\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/common\";\r\n\r\nconst INLINE_EDIT_CONTROL_VALUE_ACCESSOR = new Provider(\r\n    NG_VALUE_ACCESSOR, {\r\n        useExisting: forwardRef(() => InlineEditComponent),\r\n        multi: true\r\n    });\r\n\r\n@Component({\r\n    selector: 'inline-edit',\r\n    providers: [INLINE_EDIT_CONTROL_VALUE_ACCESSOR],\r\n    styleUrls: ['./inline-edit.component.css'],\r\n    templateUrl: './inline-edit.component.html'\r\n})\r\nexport class InlineEditComponent implements ControlValueAccessor, ngOnInit {\r\n\r\n    constructor() { }\r\n\r\n    // The internal data model\r\n    private _value: string = '';\r\n\r\n    // Placeholders for the onChange and onTouch callbacks\r\n    public onChange: any = Function.prototype;\r\n    public onTouched: any = Function.prototype;\r\n\r\n    // get accessor\r\n    get value(): any { return this._value; };\r\n\r\n    // set accessor including the onChange callback\r\n    set value(v: any) {\r\n        if (v !== this._value) {\r\n            this._value = v;\r\n            this.onChange(v);\r\n        }\r\n    }\r\n\r\n    // Will update the internal data model with incoming values\r\n    writeValue(value: any) {\r\n        this._value = value;\r\n    }\r\n\r\n    // ControlValueAccessor interface\r\n    public registerOnChange(fn: (_: any) => {}): void { this.onChange = fn; }\r\n\r\n    // ControlValueAccessor interface\r\n    public registerOnTouched(fn: () => {}): void { this.onTouched = fn; };\r\n\r\n}"]}